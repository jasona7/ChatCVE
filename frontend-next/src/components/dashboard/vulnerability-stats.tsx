import React from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { MotionCard } from '@/components/ui/motion-card'
import { PulseIndicator } from '@/components/ui/page-transition'
import { VulnerabilityStats } from '@/types'
import {
  AlertTriangle,
  Shield,
  TrendingUp,
  Activity,
  Info
} from 'lucide-react'

interface VulnerabilityStatsProps {
  stats: VulnerabilityStats
  loading?: boolean
}

export function VulnerabilityStatsComponent({ stats, loading = false }: VulnerabilityStatsProps) {
  if (loading) {
    return (
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        {[...Array(4)].map((_, i) => (
          <Card key={i} className="animate-pulse">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <div className="h-4 w-20 bg-muted rounded"></div>
              <div className="h-4 w-4 bg-muted rounded"></div>
            </CardHeader>
            <CardContent>
              <div className="h-8 w-16 bg-muted rounded mb-2"></div>
              <div className="h-3 w-24 bg-muted rounded"></div>
            </CardContent>
          </Card>
        ))}
      </div>
    )
  }

  const criticalPercentage = stats.total > 0 ? (stats.critical / stats.total) * 100 : 0
  const highPercentage = stats.total > 0 ? (stats.high / stats.total) * 100 : 0
  
  // Calculate Security Score (0-100): penalize critical/high vulnerabilities more heavily
  const calculateSecurityScore = () => {
    if (stats.total === 0) return 100 // Perfect score with no vulnerabilities
    
    // Calculate percentage of high-severity vulnerabilities
    const criticalPerc = (stats.critical / stats.total) * 100
    const highPerc = (stats.high / stats.total) * 100
    const mediumPerc = (stats.medium / stats.total) * 100
    
    // Penalty system: Critical (-30), High (-15), Medium (-5), Low (-1)
    const penalty = (criticalPerc * 0.3) + (highPerc * 0.15) + (mediumPerc * 0.05) + ((stats.low / stats.total) * 100 * 0.01)
    
    // Base score 100, subtract penalty, minimum 0
    const score = Math.max(0, 100 - penalty)
    
    return Math.round(score)
  }
  
  const securityScore = calculateSecurityScore()

  return (
    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
      <MotionCard delay={0.1} hover={false}>
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">Total Vulnerabilities</CardTitle>
          <Activity className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">{stats.total.toLocaleString()}</div>
          <p className="text-xs text-muted-foreground">
            Across all scanned images
          </p>
        </CardContent>
      </MotionCard>

      <MotionCard delay={0.15} hover={false}>
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">Critical Issues</CardTitle>
          {stats.critical > 0 ? (
            <PulseIndicator>
              <AlertTriangle className="h-4 w-4 text-red-500" />
            </PulseIndicator>
          ) : (
            <AlertTriangle className="h-4 w-4 text-red-500" />
          )}
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold text-red-600">{stats.critical}</div>
          <div className="flex items-center gap-2 mt-1">
            <Progress value={criticalPercentage} className="flex-1 h-2" />
            <span className="text-xs text-muted-foreground">
              {criticalPercentage.toFixed(1)}%
            </span>
          </div>
        </CardContent>
      </MotionCard>

      <MotionCard delay={0.2} hover={false}>
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">High Priority</CardTitle>
          {stats.high > 0 ? (
            <PulseIndicator>
              <TrendingUp className="h-4 w-4 text-orange-500" />
            </PulseIndicator>
          ) : (
            <TrendingUp className="h-4 w-4 text-orange-500" />
          )}
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold text-orange-600">{stats.high}</div>
          <div className="flex items-center gap-2 mt-1">
            <Progress value={highPercentage} className="flex-1 h-2" />
            <span className="text-xs text-muted-foreground">
              {highPercentage.toFixed(1)}%
            </span>
          </div>
        </CardContent>
      </MotionCard>

      <MotionCard delay={0.25} hover={false}>
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <div className="flex items-center gap-1">
            <CardTitle className="text-sm font-medium">Security Score</CardTitle>
            <div className="group relative">
              <Info className="h-3 w-3 text-muted-foreground hover:text-foreground cursor-help" />
              <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-popover text-popover-foreground text-xs rounded border shadow-md opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none whitespace-nowrap z-10">
                Penalty by %: Critical (-30), High (-15), Medium (-5), Low (-1)
              </div>
            </div>
          </div>
          <Shield className={`h-4 w-4 ${
            securityScore >= 80 ? 'text-green-500' : 
            securityScore >= 60 ? 'text-yellow-500' : 
            securityScore >= 40 ? 'text-orange-500' : 'text-red-500'
          }`} />
        </CardHeader>
        <CardContent>
          <div className={`text-2xl font-bold ${
            securityScore >= 80 ? 'text-green-600' : 
            securityScore >= 60 ? 'text-yellow-600' : 
            securityScore >= 40 ? 'text-orange-600' : 'text-red-600'
          }`}>
            {securityScore}
          </div>
          <p className="text-xs text-muted-foreground">
            Excellent (80+), Good (60+), Fair (40+), Poor (&lt;40)
          </p>
        </CardContent>
      </MotionCard>
    </div>
  )
}