'use client'

import React, { useState, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import { ScrollArea } from '@/components/ui/scroll-area'
import { CVEItem, CVEDetails } from '@/types'
import { api } from '@/lib/api'
import { DataTable, DataTableColumn } from '@/components/ui/data-table'
import { Search, AlertTriangle, Calendar, Package, ExternalLink, Eye, RefreshCw, Filter, Info } from 'lucide-react'
import { format } from 'date-fns'

export function CVEExplorer() {
  const [cves, setCves] = useState<CVEItem[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [searching, setSearching] = useState(false)
  const [selectedCVE, setSelectedCVE] = useState<CVEItem | null>(null)
  const [selectedCVEDetails, setSelectedCVEDetails] = useState<CVEDetails | null>(null)

  useEffect(() => {
    loadCVEs()
  }, [])

  const loadCVEs = async () => {
    try {
      setLoading(true)
      const cveData = await api.getCVEs(50)
      setCves(cveData)
    } catch (error) {
      console.error('Failed to load CVEs:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleSearch = async () => {
    if (!searchTerm.trim()) {
      loadCVEs()
      return
    }

    try {
      setSearching(true)
      const results = await api.searchCVEs(searchTerm)
      setCves(results)
    } catch (error) {
      console.error('Search failed:', error)
    } finally {
      setSearching(false)
    }
  }

  const getSeverityVariant = (severity: string) => {
    const normalizedSeverity = severity?.toUpperCase().trim()
    switch (normalizedSeverity) {
      case 'CRITICAL': return 'critical' as const
      case 'HIGH': return 'high' as const
      case 'MEDIUM': return 'medium' as const
      case 'LOW': return 'low' as const
      default: 
        return 'outline' as const
    }
  }

  const getScoreColor = (score: number) => {
    if (score >= 9.0) return 'text-red-600'
    if (score >= 7.0) return 'text-orange-600'
    if (score >= 4.0) return 'text-yellow-600'
    return 'text-green-600'
  }


  const openNVDLink = (cveId: string) => {
    window.open(`https://nvd.nist.gov/vuln/detail/${cveId}`, '_blank')
  }

  const loadCVEDetails = async (cve: CVEItem) => {
    try {
      setSelectedCVE(cve)
      const details = await api.getCVEDetails(cve.id)
      setSelectedCVEDetails(details)
    } catch (error) {
      console.error('Failed to load CVE details:', error)
    }
  }

  // Data table column configuration
  const cveColumns: DataTableColumn<CVEItem>[] = [
    {
      key: 'id',
      label: 'CVE ID',
      sortable: true,
      width: 'col-span-2',
      render: (cve) => (
        <div>
          <div className="font-mono font-medium text-primary">{cve.id}</div>
          <div className="text-xs text-muted-foreground flex items-center gap-1 mt-1">
            <Calendar className="h-3 w-3" />
            {cve.first_seen ? format(new Date(cve.first_seen), 'MMM d, yyyy') : 'N/A'}
          </div>
        </div>
      )
    },
    {
      key: 'description',
      label: 'Description',
      sortable: false,
      width: 'col-span-4',
      render: (cve) => (
        <div className="max-w-md">
          <p className="text-sm line-clamp-2 leading-relaxed">
            {cve.description || `${cve.id} - Security vulnerability affecting ${cve.affected_packages} packages`}
          </p>
          <div className="text-xs text-muted-foreground mt-1">
            {cve.total_occurrences} occurrences across {cve.affected_images} images
          </div>
        </div>
      )
    },
    {
      key: 'severity',
      label: 'Severity',
      sortable: true,
      filterable: true,
      width: 'col-span-1',
      align: 'center' as const,
      render: (cve) => (
        <Badge variant={getSeverityVariant(cve.severity)}>
          {cve.severity}
        </Badge>
      )
    },
    {
      key: 'score',
      label: 'CVSS Score',
      sortable: true,
      width: 'col-span-1',
      align: 'center' as const,
      render: (cve) => (
        <div className="text-center">
          <div className={`text-lg font-bold ${cve.cvss_score ? getScoreColor(cve.cvss_score) : 'text-muted-foreground'}`}>
            {cve.cvss_score ? cve.cvss_score.toFixed(1) : 'N/A'}
          </div>
          <div className="text-xs text-muted-foreground">CVSS</div>
        </div>
      )
    },
    {
      key: 'affected_packages',
      label: 'Packages',
      sortable: false,
      width: 'col-span-2',
      render: (cve) => (
        <div className="flex items-center gap-1">
          <Package className="h-3 w-3 text-muted-foreground" />
          <span className="text-sm">
            {cve.affected_packages} packages
          </span>
          <div className="text-xs text-muted-foreground ml-2">
            in {cve.affected_images} images
          </div>
        </div>
      )
    }
  ]

  if (loading) {
    return (
      <div className="space-y-4">
        <div className="flex justify-between items-center">
          <h2 className="text-2xl font-bold">CVE Explorer</h2>
        </div>
        <div className="grid gap-4">
          {[...Array(5)].map((_, i) => (
            <Card key={i} className="animate-pulse">
              <CardContent className="p-6">
                <div className="h-4 bg-muted rounded w-1/3 mb-2"></div>
                <div className="h-3 bg-muted rounded w-2/3 mb-2"></div>
                <div className="h-3 bg-muted rounded w-1/2"></div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    )
  }

  // CVE Detail Modal
  if (selectedCVE) {
    return (
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <div className="flex items-center gap-3">
            <Button variant="ghost" size="sm" onClick={() => { setSelectedCVE(null); setSelectedCVEDetails(null); }}>
              ‚Üê
            </Button>
            <div>
              <h2 className="text-2xl font-bold">{selectedCVE.id}</h2>
              <p className="text-muted-foreground">
                First seen {selectedCVE.first_seen ? format(new Date(selectedCVE.first_seen), 'PPP') : 'Unknown'}
              </p>
            </div>
          </div>
          <div className="flex gap-2">
            <Button variant="outline" size="sm" onClick={() => openNVDLink(selectedCVE.id)}>
              <ExternalLink className="h-4 w-4 mr-2" />
              View on NVD
            </Button>
          </div>
        </div>

        {/* CVE Overview */}
        <div className="grid gap-4 md:grid-cols-4">
          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center gap-2">
                <AlertTriangle className="h-4 w-4 text-muted-foreground" />
                <div>
                  <div className="text-2xl font-bold">{selectedCVE.severity}</div>
                  <div className="text-xs text-muted-foreground">Severity Level</div>
                </div>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center gap-2">
                <Info className="h-4 w-4 text-muted-foreground" />
                <div>
                  <div className={`text-2xl font-bold ${selectedCVE.cvss_score ? getScoreColor(selectedCVE.cvss_score) : 'text-muted-foreground'}`}>
                    {selectedCVE.cvss_score ? selectedCVE.cvss_score.toFixed(1) : 'N/A'}
                  </div>
                  <div className="text-xs text-muted-foreground">CVSS Score</div>
                </div>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center gap-2">
                <Package className="h-4 w-4 text-muted-foreground" />
                <div>
                  <div className="text-2xl font-bold">{selectedCVE.affected_packages}</div>
                  <div className="text-xs text-muted-foreground">Affected Packages</div>
                </div>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center gap-2">
                <Calendar className="h-4 w-4 text-muted-foreground" />
                <div>
                  <div className="text-2xl font-bold">{selectedCVE.first_seen ? format(new Date(selectedCVE.first_seen), 'MMM d') : 'N/A'}</div>
                  <div className="text-xs text-muted-foreground">Published</div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Scans Containing This CVE */}
        {selectedCVEDetails && selectedCVEDetails.scans.length > 0 && (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Search className="h-5 w-5" />
                Scans Containing This CVE
              </CardTitle>
              <CardDescription>Scan bundles where this vulnerability was detected</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {selectedCVEDetails.scans.map((scan, index) => (
                  <div key={index} className="border rounded-lg p-4">
                    <div className="flex items-center justify-between mb-2">
                      <h4 className="font-semibold">{scan.scan_name}</h4>
                      <Badge variant="outline">
                        {format(new Date(scan.scan_timestamp), 'MMM d, yyyy')}
                      </Badge>
                    </div>
                    <div className="text-sm text-muted-foreground mb-2">
                      {scan.images.length} images affected, {scan.packages.length} package instances
                    </div>
                    <div className="flex flex-wrap gap-1">
                      {scan.images.map((image, imgIndex) => (
                        <Badge key={imgIndex} variant="outline" className="text-xs font-mono">
                          {image.split('/').pop()}
                        </Badge>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Affected Packages */}
        {selectedCVEDetails && selectedCVEDetails.packages.length > 0 && (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Package className="h-5 w-5" />
                Affected Packages
              </CardTitle>
              <CardDescription>Package instances affected by this vulnerability</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-2 max-h-64 overflow-y-auto">
                {selectedCVEDetails.packages.map((pkg, index) => (
                  <div key={index} className="flex items-center justify-between p-2 bg-muted rounded">
                    <div>
                      <div className="font-mono font-semibold text-sm">{pkg.name}</div>
                      <div className="text-xs text-muted-foreground">
                        Version: {pkg.version} {pkg.fixed_in && `‚Ä¢ Fixed in: ${pkg.fixed_in}`}
                      </div>
                      <div className="text-xs text-muted-foreground">
                        Image: {pkg.image.split('/').pop()}
                      </div>
                    </div>
                    {pkg.scan_name && (
                      <Badge variant="outline" className="text-xs">
                        {pkg.scan_name}
                      </Badge>
                    )}
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        )}

        {/* CVE Information */}
        <Card>
          <CardHeader>
            <CardTitle>CVE Information</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid gap-4 md:grid-cols-2">
              <div>
                <div className="text-sm font-medium">CVE ID</div>
                <div className="text-sm text-muted-foreground font-mono">{selectedCVE.id}</div>
              </div>
              <div>
                <div className="text-sm font-medium">First Seen</div>
                <div className="text-sm text-muted-foreground">
                  {selectedCVE.first_seen ? format(new Date(selectedCVE.first_seen), 'PPP') : 'Unknown'}
                </div>
              </div>
              <div>
                <div className="text-sm font-medium">Severity</div>
                <Badge variant={getSeverityVariant(selectedCVE.severity)} className="text-xs">
                  {selectedCVE.severity}
                </Badge>
              </div>
              <div>
                <div className="text-sm font-medium">CVSS Score</div>
                <div className={`text-sm font-medium ${selectedCVE.cvss_score ? getScoreColor(selectedCVE.cvss_score) : 'text-muted-foreground'}`}>
                  {selectedCVE.cvss_score ? selectedCVE.cvss_score.toFixed(1) + ' / 10.0' : 'N/A'}
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold">CVE Explorer</h2>
          <p className="text-muted-foreground">
            Explore and search Common Vulnerabilities and Exposures
          </p>
        </div>
        <div className="flex gap-2">
          <Button variant="outline" onClick={loadCVEs}>
            <RefreshCw className="h-4 w-4 mr-2" />
            Refresh
          </Button>
          <Button variant="outline" onClick={handleSearch} disabled={searching}>
            <Search className="h-4 w-4 mr-2" />
            {searching ? 'Searching...' : 'Advanced Search'}
          </Button>
        </div>
      </div>

      {/* Data Table */}
      <DataTable
        data={cves}
        columns={cveColumns}
        title="CVE Database"
        description="Browse, search, and sort through vulnerability data"
        searchPlaceholder="Search by CVE ID, description, or affected packages..."
        loading={loading}
        pageSize={15}
        onRowClick={(cve) => loadCVEDetails(cve)}
        renderActions={(cve) => (
          <div className="flex gap-1">
            <Button 
              variant="outline" 
              size="sm"
              onClick={(e) => {
                e.stopPropagation()
                loadCVEDetails(cve)
              }}
              title="View Details"
            >
              <Eye className="h-4 w-4" />
            </Button>
            <Button 
              variant="outline" 
              size="sm"
              onClick={(e) => {
                e.stopPropagation()
                openNVDLink(cve.id)
              }}
              title="View on NVD"
            >
              <ExternalLink className="h-4 w-4" />
            </Button>
          </div>
        )}
        emptyState={
          <div className="text-center py-8">
            <AlertTriangle className="h-12 w-12 mx-auto mb-4 text-muted-foreground" />
            <h3 className="text-lg font-semibold mb-2">No CVEs found</h3>
            <p className="text-muted-foreground mb-4">
              {searchTerm ? 'No CVEs match your search criteria.' : 'Unable to load CVE data from the database.'}
            </p>
            <Button variant="outline" onClick={loadCVEs}>
              <RefreshCw className="h-4 w-4 mr-2" />
              Retry Loading
            </Button>
          </div>
        }
      />
    </div>
  )
}
