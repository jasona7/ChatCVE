'use client'

import React, { useState, useMemo } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { ScrollArea } from '@/components/ui/scroll-area'
import { 
  Search, 
  Filter, 
  SortAsc,
  SortDesc,
  ExternalLink,
  Bookmark,
  Calendar,
  Package,
  AlertTriangle,
  Info,
  Shield,
  Download
} from 'lucide-react'
import { CVERecord } from '@/types'
import { formatDate, getSeverityColor } from '@/lib/utils'

interface CVEExplorerProps {
  cves: CVERecord[]
  onBookmark: (cve: CVERecord) => void
  onFilter: (filters: CVEFilters) => void
}

interface CVEFilters {
  search: string
  severity: string[]
  imageTag: string
  packageType: string
}

export function CVEExplorer({ cves, onBookmark, onFilter }: CVEExplorerProps) {
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedSeverities, setSelectedSeverities] = useState<string[]>([])
  const [sortBy, setSortBy] = useState<'date' | 'severity' | 'name'>('date')
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc')
  const [selectedImageTag, setSelectedImageTag] = useState('')
  const [selectedPackageType, setSelectedPackageType] = useState('')

  // Get unique values for filters
  const uniqueImageTags = useMemo(() => 
    Array.from(new Set(cves.map(cve => cve.image_tag))).slice(0, 10),
    [cves]
  )

  const uniquePackageTypes = useMemo(() =>
    Array.from(new Set(cves.map(cve => cve.type))),
    [cves]
  )

  const severityOptions = ['Critical', 'High', 'Medium', 'Low', 'Negligible']

  // Filter and sort CVEs
  const filteredAndSortedCVEs = useMemo(() => {
    let filtered = cves.filter(cve => {
      const matchesSearch = !searchTerm || 
        cve.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        cve.vulnerability.toLowerCase().includes(searchTerm.toLowerCase()) ||
        cve.image_tag.toLowerCase().includes(searchTerm.toLowerCase())
      
      const matchesSeverity = selectedSeverities.length === 0 || 
        selectedSeverities.includes(cve.severity)
      
      const matchesImage = !selectedImageTag || cve.image_tag === selectedImageTag
      const matchesType = !selectedPackageType || cve.type === selectedPackageType

      return matchesSearch && matchesSeverity && matchesImage && matchesType
    })

    // Sort
    filtered.sort((a, b) => {
      let comparison = 0
      
      switch (sortBy) {
        case 'date':
          comparison = new Date(a.date_added).getTime() - new Date(b.date_added).getTime()
          break
        case 'severity':
          const severityOrder = { 'Critical': 5, 'High': 4, 'Medium': 3, 'Low': 2, 'Negligible': 1 }
          comparison = (severityOrder[a.severity] || 0) - (severityOrder[b.severity] || 0)
          break
        case 'name':
          comparison = a.name.localeCompare(b.name)
          break
      }
      
      return sortOrder === 'desc' ? -comparison : comparison
    })

    return filtered
  }, [cves, searchTerm, selectedSeverities, selectedImageTag, selectedPackageType, sortBy, sortOrder])

  const toggleSeverity = (severity: string) => {
    setSelectedSeverities(prev => 
      prev.includes(severity)
        ? prev.filter(s => s !== severity)
        : [...prev, severity]
    )
  }

  const clearFilters = () => {
    setSearchTerm('')
    setSelectedSeverities([])
    setSelectedImageTag('')
    setSelectedPackageType('')
  }

  return (
    <div className="space-y-6">
      {/* Search and Filters */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center">
            <Search className="h-5 w-5 mr-2" />
            CVE Explorer
          </CardTitle>
          <CardDescription>
            Search and filter through {cves.length.toLocaleString()} vulnerability records
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Search */}
          <div className="relative">
            <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
            <Input
              placeholder="Search CVEs, packages, or container images..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
            />
          </div>

          {/* Filters */}
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
            {/* Severity Filter */}
            <div className="space-y-2">
              <label className="text-sm font-medium">Severity</label>
              <div className="flex flex-wrap gap-1">
                {severityOptions.map(severity => (
                  <Button
                    key={severity}
                    variant={selectedSeverities.includes(severity) ? 'default' : 'outline'}
                    size="sm"
                    onClick={() => toggleSeverity(severity)}
                    className="text-xs"
                  >
                    {severity}
                  </Button>
                ))}
              </div>
            </div>

            {/* Image Tag Filter */}
            <div className="space-y-2">
              <label className="text-sm font-medium">Container Image</label>
              <select 
                value={selectedImageTag}
                onChange={(e) => setSelectedImageTag(e.target.value)}
                className="w-full p-2 text-sm border rounded-md"
              >
                <option value="">All images</option>
                {uniqueImageTags.map(tag => (
                  <option key={tag} value={tag}>{tag}</option>
                ))}
              </select>
            </div>

            {/* Package Type Filter */}
            <div className="space-y-2">
              <label className="text-sm font-medium">Package Type</label>
              <select 
                value={selectedPackageType}
                onChange={(e) => setSelectedPackageType(e.target.value)}
                className="w-full p-2 text-sm border rounded-md"
              >
                <option value="">All types</option>
                {uniquePackageTypes.map(type => (
                  <option key={type} value={type}>{type}</option>
                ))}
              </select>
            </div>

            {/* Sort Options */}
            <div className="space-y-2">
              <label className="text-sm font-medium">Sort By</label>
              <div className="flex space-x-1">
                <select 
                  value={sortBy}
                  onChange={(e) => setSortBy(e.target.value as any)}
                  className="flex-1 p-2 text-sm border rounded-md"
                >
                  <option value="date">Date Added</option>
                  <option value="severity">Severity</option>
                  <option value="name">Package Name</option>
                </select>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setSortOrder(prev => prev === 'asc' ? 'desc' : 'asc')}
                >
                  {sortOrder === 'asc' ? <SortAsc className="h-4 w-4" /> : <SortDesc className="h-4 w-4" />}
                </Button>
              </div>
            </div>
          </div>

          {/* Active Filters and Clear */}
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <span className="text-sm text-muted-foreground">
                Showing {filteredAndSortedCVEs.length} of {cves.length} vulnerabilities
              </span>
              {(searchTerm || selectedSeverities.length > 0 || selectedImageTag || selectedPackageType) && (
                <Button variant="ghost" size="sm" onClick={clearFilters}>
                  Clear Filters
                </Button>
              )}
            </div>
            <Button variant="outline" size="sm">
              <Download className="h-4 w-4 mr-2" />
              Export Results
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* CVE Results */}
      <Card>
        <CardHeader>
          <CardTitle>Vulnerability Records</CardTitle>
        </CardHeader>
        <CardContent>
          <ScrollArea className="h-96">
            <div className="space-y-3">
              {filteredAndSortedCVEs.length === 0 ? (
                <div className="text-center py-8 text-muted-foreground">
                  <Shield className="h-12 w-12 mx-auto mb-4 opacity-50" />
                  <p>No vulnerabilities found matching your criteria.</p>
                </div>
              ) : (
                filteredAndSortedCVEs.map((cve) => (
                  <Card key={cve.id} className="relative">
                    <CardContent className="p-4">
                      <div className="flex items-start justify-between">
                        <div className="flex-1 space-y-2">
                          <div className="flex items-center space-x-2">
                            <h4 className="text-sm font-medium">{cve.vulnerability}</h4>
                            <Badge variant={cve.severity.toLowerCase() as any}>
                              {cve.severity}
                            </Badge>
                            <Badge variant="outline" className="text-xs">
                              {cve.type}
                            </Badge>
                          </div>
                          
                          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                            <div>
                              <span className="text-muted-foreground">Package:</span>
                              <p className="font-medium">{cve.name}</p>
                            </div>
                            <div>
                              <span className="text-muted-foreground">Version:</span>
                              <p className="font-medium">{cve.installed}</p>
                              {cve.fixed_in && (
                                <p className="text-xs text-green-600">
                                  Fixed in: {cve.fixed_in}
                                </p>
                              )}
                            </div>
                            <div>
                              <span className="text-muted-foreground">Container:</span>
                              <p className="font-medium text-xs truncate">{cve.image_tag}</p>
                            </div>
                          </div>
                          
                          <div className="flex items-center space-x-2 text-xs text-muted-foreground">
                            <Calendar className="h-3 w-3" />
                            <span>Added: {formatDate(cve.date_added)}</span>
                          </div>
                        </div>
                        
                        <div className="flex space-x-1">
                          <Button 
                            variant="ghost" 
                            size="icon" 
                            className="h-6 w-6"
                            onClick={() => onBookmark(cve)}
                          >
                            <Bookmark className="h-3 w-3" />
                          </Button>
                          <Button variant="ghost" size="icon" className="h-6 w-6">
                            <ExternalLink className="h-3 w-3" />
                          </Button>
                          <Button variant="ghost" size="icon" className="h-6 w-6">
                            <Info className="h-3 w-3" />
                          </Button>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))
              )}
            </div>
          </ScrollArea>
        </CardContent>
      </Card>
    </div>
  )
}